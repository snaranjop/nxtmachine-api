basePath: /user
definitions:
    UserResponse:
        description: ""
        properties:
            fullName:
                type: string
                description: ""
            email:
                type: string
                description: ""
            age:
                type: number
                format: double
                description: ""
            userID:
                type: string
                description: ""
            status:
                type: string
                description: ""
        type: object
        required:
            - fullName
            - email
            - age
            - userID
            - status
info:
    description: 'nxtmachine API Docs'
    license:
        name: MIT
    title: 'nxtmachine API'
    version: '1.0'
paths:
    /:
        get:
            operationId: HomeServiceGetHome
            produces:
                - text/html
            responses:
                '200':
                    description: Ok
                    schema:
                        type: string
            description: ""
            parameters: []
    '/user/{userID}':
        get:
            operationId: UserServiceGetUser
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        $ref: '#/definitions/UserResponse'
                    examples:
                        application/json:
                            fullName: 'Sergio Naranjo'
                            email: snp@gmail.com
                            age: 22
                            userID: 193-A
                            status: success
            description: 'This endpoint allows to retrieve an user form the database. If the user doesn''t exist the field status will be "non-existing-user" otherwise, it will be "success"'
            parameters:
                -
                    description: 'ID of the user to retrieve'
                    in: path
                    name: userID
                    required: true
                    type: string
    /user/:
        post:
            operationId: UserServiceUpdateUser
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                    examples:
                        application/json:
                            fullName: 'Sergio Naranjo'
                            email: snp@gmail.com
                            age: 22
                            userID: 193-A
                            status: success
            description: 'This endpoint allows to retrieve an user form the database. If the user doesn''t exist the field status will be "non-existing-user" otherwise, it will be "success"'
            consumes:
                - application/json
            parameters:
                -
                    description: ""
                    in: body
                    name: userBody
                    required: true
                    schema:
                        type: object
        put:
            operationId: UserServiceCreateUser
            produces:
                - application/json
            responses:
                '200':
                    description: Ok
                    schema:
                        type: object
                    examples:
                        application/json:
                            fullName: 'Sergio Naranjo'
                            email: snp@gmail.com
                            age: 35
                            id: users/353-A
            description: 'This service allows to create a new user. If the operation is successful the status will be "success". If there is any error the error msg will be in the status field.'
            consumes:
                - application/json
            parameters:
                -
                    description: 'User object with the info to create the user'
                    in: body
                    name: user
                    required: true
                    schema:
                        type: object
swagger: '2.0'
securityDefinitions: {}
host: 'https://nxt-machine-poc.herokuapp.com/'
